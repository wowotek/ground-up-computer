#!/usr/bin/env python3

def assembly(filename: str):
    OPERATION_VALUES = {
        "NOP"   : 0,
        "HALT"  : 1,
        "MOV"   : 2,
        "SET"   : 3,
        "MEMSET": 4,
        "LOAD"  : 5,
        "STORE" : 6,
        "LEA"   : 7,
        "RND"   : 8,
        "RNDC"  : 9,
        "RNDS"  : 10,
        "JMP"   : 100,
        "JEZ"   : 101,
        "JEQ"   : 105,
        "JNE"   : 106,
        "JMG"   : 107,
        "JML"   : 108,
        "OR"    : 200,
        "NOR"   : 201,
        "AND"   : 202,
        "NAND"  : 203,
        "XOR"   : 204,
        "XNOR"  : 205,
        "INC"   : 206,
        "DEC"   : 207,
        "ADD"   : 301,
        "SUB"   : 302,
        "MUL"   : 303,
        "DIV"   : 304,
        "CMP"   : 305,
    }

    OPERATION_OPERANDS: dict[str, list[str]] = {
        "NOP"   : [],
        "HALT"  : [],
        "MOV"   : ["REG", "REG"],
        "SET"   : ["REG", "CONST"],
        "MEMSET": ["RAM" "CONST"],
        "LOAD"  : ["RAM", "REG"],
        "STORE" : ["REG", "RAM"],
        "LEA"   : ["RAM", "REG"],
        "RND"   : ["REG"],
        "RNDC"  : ["REG", "CONST"],
        "RNDS"  : ["REG"],
        "JMP"   : ["RAM"],
        "JEZ"   : ["RAM"],
        "JGZ"   : ["RAM"],
        "JMN"   : ["RAM"],
        "JEQ"   : ["RAM"],
        "JNE"   : ["RAM"],
        "JMG"   : ["RAM"],
        "JML"   : ["RAM"],
        "OR"    : ["REG", "REG"],
        "NOR"   : ["REG", "REG"],
        "AND"   : ["REG", "REG"],
        "NAND"  : ["REG", "REG"],
        "XOR"   : ["REG", "REG"],
        "XNOR"  : ["REG", "REG"],
        "INC"   : ["REG"],
        "DEC"   : ["REG"],
        "ADD"   : ["REG", "REG"],
        "SUB"   : ["REG", "REG"],
        "MULY"  : ["REG", "REG"],
        "DIV"   : ["REG", "REG"],
        "CMP"   : ["REG", "REG"],
    }

    REGISTRY_NAMES = {
        "RFP": 0,
        "RFI": 1,
        "RFR": 2,

        "RFF": 3,

        "RGA": 4,
        "RGB": 5,
        "RGC": 6,
        "RGD": 7,
        "RGE": 8,
        "RGF": 9,
        "RGG": 10,
        "RGH": 11,
    }

    PROGRAM: dict[int, list[str]] = {}
    DIRECTIVES: dict[str, int] = {}
    VARIABLES: dict[str, int] = {}

    JMP_ADDRESES = {}
    with open(filename, "r") as f:
        contents = f.readlines()
        contents = [" ".join([k for k in j.split(" ") if k != ""]) for j in [i.replace("\n", "") for i in contents if i[0] != ";"] if j != ""]
        contents = [i.split(";", 1)[0] for i in contents]
        contents = [i.rstrip() for i in contents]
        contents = [i for i in contents if i != ""]

    count = 0
    for i in contents:
        if i[0] == ".":
            value = i.split(" ")[1]
            if "0x" in value:
                value = int(value.lower().replace("0x", "").replace("#", ""), 16)
            elif "0b" in value:
                value = int(value.lower().replace("0b", ""), 2)
            else:
                value = int(value, 10)
            DIRECTIVES[i.split(" ")[0]] = value
        elif "=" in i:
            s = [j.replace(" ", "") for j in i.split("=")]
            if len(s) != 2:
                print("Variable assignments failed at:")
                print("at:      " + i)
                exit(1)
            if s[1] == "":
                print("Variable assignments need value")
                print("at:      " + i + " ????")
                exit(1)
            
            reserved_name = [i.lower() for i in OPERATION_VALUES] + [i.lower() for i in REGISTRY_NAMES]
            if s[0].lower() in reserved_name:
                print("Variable names is reserved")
                print("at:      " + i)
                exit(1)
            
            var, val = (s[0], s[1])
            VARIABLES[var] = val

        elif i[0] != ":":
            PROGRAM[count] = [i.upper() for i in i.split(" ")]
            count += 1
        else:
            JMP_ADDRESES[i.replace(":", "").upper()] = count

    ####################################################################################
    ####################################################################################

    # Check if Any Written Operand is not defined
    for i in PROGRAM:
        if PROGRAM[i][0] not in [i for i in OPERATION_VALUES]: raise Exception(f"Operator of {PROGRAM[i][0]} Does Not Exist")

    # Parse operand to binary counterpart
    for i in PROGRAM:
        if PROGRAM[i][0] in ["JMP", "JEZ", "JGZ", "JLZ", "JMN", "JEQ", "JNE", "JMG", "JML"]: continue
        operand = OPERATION_OPERANDS[PROGRAM[i][0]]
        for j in range(len(operand)):
            if operand[j] == "CONST":       # Parse Constant (immediate value) operand
                value = PROGRAM[i][j+1].lower()
                if "0x" in value:
                    PROGRAM[i][j+1] = int(PROGRAM[i][j+1].lower().replace("0x", "").replace("#", ""), 16)
                elif "0b" in value:
                    PROGRAM[i][j+1] = int(PROGRAM[i][j+1].lower().replace("0b", ""), 2)
                else:
                    PROGRAM[i][j+1] = int(PROGRAM[i][j+1], 10)
            if operand[j]  == "REG":
                value = PROGRAM[i][j+1].upper()
                try:
                    PROGRAM[i][j+1] = REGISTRY_NAMES[PROGRAM[i][j+1]]
                except:
                    try:
                        PROGRAM[i][j+1] = VARIABLES[PROGRAM[i][j+1]]
                        if "0x" in value:
                            PROGRAM[i][j+1] = int(PROGRAM[i][j+1].lower().replace("0x", "").replace("#", ""), 16)
                        elif "0b" in value:
                            PROGRAM[i][j+1] = int(PROGRAM[i][j+1].lower().replace("0b", ""), 2)
                        else:
                            PROGRAM[i][j+1] = int(PROGRAM[i][j+1], 10)
                    except:
                        print("Invalid Operand")
                        print("at:      " + PROGRAM)
            if operand[j] == "RAM":
                value = PROGRAM[i][j+1].lower()
                if "0x" in value or "#" in value:
                    PROGRAM[i][j+1] = int(PROGRAM[i][j+1].lower().replace("0x", "").replace("#", ""), 16)
                elif "0b" in value:
                    PROGRAM[i][j+1] = int(PROGRAM[i][j+1].lower().replace("0b", ""), 2)
                else:
                    PROGRAM[i][j+1] = int(PROGRAM[i][j+1], 10)

    # Parse Jumps and/or Branches Control
    for i in PROGRAM:
        if PROGRAM[i][0] in ["JMP", "JEZ", "JGZ", "JLZ", "JMN", "JEQ", "JNE", "JMG", "JML"]:
            if PROGRAM[i][1] not in JMP_ADDRESES: raise Exception(f"SUBSECTION {PROGRAM[i][1]} does not exist")
        
            PROGRAM[i][1] = JMP_ADDRESES[PROGRAM[i][1]]
    
    # Parse Operation to Binary Counterparts
    for i in PROGRAM:
        ops = PROGRAM[i][0]
        if ops not in [i for i in OPERATION_VALUES]: raise Exception(f"OPERATOR {i} not Found")

        PROGRAM[i][0] = OPERATION_VALUES[ops]

    data = []
    for i in PROGRAM:
        op = PROGRAM[i]
        while len(op) < 3:
            op.append(0)
        
        op, opn1, opn2 = op
        op = bin(op).replace("0b", "").rjust(10, "0")
        opn1 = bin(opn1).replace("0b", "").rjust(123, "0")
        opn2 = bin(opn2).replace("0b", "").rjust(123, "0")
        
        data.append("".join([op, opn1, opn2]))
    
    return data


if __name__ == "__main__":
    import sys

    args = sys.argv
    args.pop(0)
    outfile = "a.bin"
    infile = ""

    while len(args) > 0:
        for i in range(len(args)):
            if "-o" == args[i]:
                outfile = args[i+1]
                args.pop(i)
                args.pop(i)
                break
    
        infile = args.pop()
    
    if infile == None or infile == "":
        print("Please provide input file")
        exit(1)
    else: 
        try: open(infile, "r")
        except: 
            print(f"{infile} not found!")
            exit(1)

    data = assembly(infile)
    with open(outfile, "w") as f:
        for i in data:
            f.write(i)
            f.write("\n")
